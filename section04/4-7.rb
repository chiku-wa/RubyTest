#encoding: utf-8

def get_range_element
  # =====4.7.1 さまざまな要素の取得方法
  arr = [1, 2, 3, 4, 5, 6]

  # [指定位置, 取得する要素数]で、指定した範囲の要素を抜き出せる
  puts arr[1, 4] # ->[2,3,4,5]

  # 複数の要素をピンポイントに取得したい場合は、value_atメソッドを使う
  puts arr.values_at(0, 2, 4) # -> [1,3,5]

  # -X：末尾から数えてX番目
  puts arr[-1] # ->6
  puts arr[-2] # ->5
  puts arr[-2, 2] # ->[5,6] ※注意：開始位置は右から数えるが、方向は左から右

  # lastメソッドを使うと末尾の要素を取得できる
  puts arr.last
  # 引数を渡すと、最後の要素から数えてXこ取得する
  puts arr.last(3) # ->[4,5,6]

  # firstメソッドを使うと先頭の要素を取得できる
  puts arr.first # ->1
  puts arr.first(3) #->[1,2,3]

  # =====4.7.2 さまざまな要素の変更方法
  # 負の添字で値を書き換えることも可能
  arr_10x = [10, 20, 30, 40, 50]
  arr_10x[-3, 2] = 99
  puts arr_10x.join(",") # ->[10, 20, 30, 99, 50]

  # << だけでなく、pushメソッドを使っても配列を追加できる
  arr_push = [11, 22, 33]
  arr_push.push(44) # ->[11,22,33,44]
  # 一度に複数の要素を追加できる
  arr_push.push(55, 66) # ->[11,22,33,55]
  puts arr_push.join(",")

  # 要素を削除する場合は以下をdeleteメソッドを用いる
  arr_delete = [1, 2, 3, 4, 5]
  arr_delete.delete(1) #->[2,3,4,5]
  puts arr_delete.join(",")

  # =====4.7.3 配列の連結
  # 配列を連結する場合はconcatメソッドを使う
  a = [1]
  b = [2, 3]
  a.concat(b)
  # 破壊的メソッドのため、aの値のみが書き換わる
  puts a.join(",")  #->[1,2,3]
  puts b.join(",") #->[2,3]

  # ★予期せぬバグの原因になるので、+演算子を用いること！
  c = [4]
  d = [5, 6]
  e = c + d #->[4,5,6]
  puts e.join(",")

  # =====4.7.4 和集合、差集合、積集合
  a = [1, 2, 3, 4, 5]
  b = [2, 4, 6]

  # 「|」和集合：2つの配列を重複排除して連結する
  puts (a | b).join(",") #->[1, 2, 3, 4, 5, 6]

  # 「-」差集合：左辺の要素から、右辺の要素の値を取り除く
  puts (a - b).join(",") #->[1,3,5]

  # 「&」積集合：2つの配列に共通する要素を抽出する
  puts (a & b).join(",") #->[2,4]

  # ===== 4.7.5 多重代入で残りの全要素を配列として受け取る

end

get_range_element
